<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Sebastian Nielsen's Blog</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://sebastian3495.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="https://sebastian3495.github.io" />
<updated>2018-04-03T17:57:55+02:00</updated>
<id>https://sebastian3495.github.io/</id>
<author>
  <name>Sebastian Nielsen</name>
  <uri>https://sebastian3495.github.io/</uri>
  <email>sebastiangrundet@hotmail.dk</email>
</author>


<entry>
  <title type="html"><![CDATA[Text summarizer]]></title>
 <link rel="alternate" type="text/html" href="https://sebastian3495.github.io/natural%20language%20processing%20(nlp)/data%20analytics/Text-summarizer/" />
  <id>https://sebastian3495.github.io/natural%20language%20processing%20(nlp)/data%20analytics/Text-summarizer</id>
  <published>2018-03-19T00:00:00+02:00</published>
  <updated>2018-03-19T00:00:00+02:00</updated>
  <author>
    <name>Sebastian Nielsen</name>
    <uri>https://sebastian3495.github.io</uri>
    <email>sebastiangrundet@hotmail.dk</email>
  </author>
  <content type="html">
    &lt;p&gt;Are you tired of having to read through all of the crap in an article? Ever wished that you just could skip to 
the important stuff? Well, you will soon be able to do just that..&lt;/p&gt;

&lt;p&gt;The text summarizer we are going to build in this post falls into the catagory of NLP. &lt;br /&gt;Natural-language processing 
(NLP) is a field of artificial intelligence which enables computers to analyze and understand the human language. We 
are going to explore this field today by building our very own text summarizer.&lt;/p&gt;

&lt;!-- more --&gt;
&lt;!--more--&gt;

&lt;h2 id=&quot;the-steps-to-build-a-text-summarizer&quot;&gt;The steps to build a text summarizer&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Remove stop words (defined below)&lt;/li&gt;
  &lt;li&gt;Count the frequency of each word&lt;/li&gt;
  &lt;li&gt;Assign a score to each sentence depending on the words it contains&lt;/li&gt;
  &lt;li&gt;Build summary by adding every sentence above a certain score threshold&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-are-stopwords&quot;&gt;What are stopwords?&lt;/h3&gt;
&lt;p&gt;Stop words are any words that does not add a value to the meaning of a sentence. They are 
the most common words in a language. Here are some examples of stop words:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;above&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;again&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;an&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;as&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;be&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;been&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;being&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We usually remove stop words from the text as knowing their frequency does not help us decide, whether the sentence as a whole 
is important or not.&lt;/p&gt;

&lt;div id=&quot;centerbox&quot;&gt;
  &lt;h5&gt;Hover the text to see the stop words disappear&lt;/h5&gt;
  &lt;article class=&quot;highlight interactive&quot;&gt;
    &lt;p&gt;
		&lt;span&gt;Greed&lt;/span&gt; has &lt;span&gt;poisoned&lt;/span&gt; &lt;span&gt;men's&lt;/span&gt; &lt;span&gt;souls,&lt;/span&gt; has &lt;span&gt;barricaded&lt;/span&gt; the &lt;span&gt;world&lt;/span&gt; with &lt;span&gt;hate,&lt;/span&gt; has &lt;span&gt;goose&lt;/span&gt; &lt;span&gt;stepped&lt;/span&gt; &lt;span&gt;us&lt;/span&gt; into &lt;span&gt;misery&lt;/span&gt; and &lt;span&gt;bloodshed.&lt;/span&gt; &lt;span&gt;We&lt;/span&gt; have &lt;span&gt;developed&lt;/span&gt; &lt;span&gt;speed,&lt;/span&gt; but we have &lt;span&gt;shut&lt;/span&gt; ourselves in. &lt;span&gt;Machinery&lt;/span&gt; that &lt;span&gt;gives&lt;/span&gt; &lt;span&gt;abundance&lt;/span&gt; has &lt;span&gt;left&lt;/span&gt; &lt;span&gt;us&lt;/span&gt; in &lt;span&gt;want.&lt;/span&gt; &lt;span&gt;Our&lt;/span&gt; &lt;span&gt;knowledge&lt;/span&gt; has &lt;span&gt;made&lt;/span&gt; &lt;span&gt;us&lt;/span&gt; &lt;span&gt;cynical.&lt;/span&gt;   
	&lt;/p&gt;
	&lt;/article&gt;
&lt;/div&gt;

&lt;h1 id=&quot;step-1---removing-stop-words&quot;&gt;Step 1 - removing stop words&lt;/h1&gt;
&lt;p&gt;We start off importing three libraries from the natural language toolkit (NLTK):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nltk.corpus&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nltk.tokenize&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sent_tokenize&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nltk.stem.snowball&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnowballStemmer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;corpus&quot;&gt;Corpus&lt;/h4&gt;
&lt;p&gt;Corpus means a collection of text. It could be data sets of poems by a certain poet, bodies of work by a certain author, etc. 
In this case, we are going to use a data set of pre-determined stop words.&lt;/p&gt;

&lt;h4 id=&quot;tokenizers&quot;&gt;Tokenizers&lt;/h4&gt;
&lt;p&gt;Tokenizers devides a piece of text into a series of tokens (pieces). There are three different kinds of tokenizers: 
word, sentence, and regex tokenizers. 
Note that tokens in data analytics and cyber security are two completely different things.&lt;/p&gt;
&lt;figure class=&quot;image-right&quot;&gt;
	&lt;img style=&quot;margin-bottom: 0; margin-left: 25px;&quot; width=&quot;180px;&quot; src=&quot;https://sebastian3495.github.io/images/P_Text-summarizer/stemmerExample.png&quot; alt=&quot;example of a stemmer&quot; /&gt;
	&lt;figcaption&gt;The stem of waited, waits, and waiting is wait.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;stemmer&quot;&gt;Stemmer&lt;/h4&gt;
&lt;p&gt;The stem is the root of a word. A stem is a form to which affixes can be attached. 
See the example with wait to the right.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
Now, let’s create the stop words list and 
tokenize the text into tokens consiting of words. The &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; variable is the text of our choice, that we wish 
to analyse.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;stopWords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;english&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Supports the Danish language too&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-2---create-a-frequency-table&quot;&gt;Step 2 - create a frequency table&lt;/h1&gt;

&lt;p&gt;Creating the frequency table is straightward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Init dict to store word frequencies in&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;freqTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Stem the word&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stemmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	
    &lt;span class=&quot;c&quot;&gt;# If the word isn't a stop word proceed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopWords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
				
    &lt;span class=&quot;c&quot;&gt;# Increase freq of word with 1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freqTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;freqTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;freqTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-3---assigning-a-sentence-score&quot;&gt;Step 3 - Assigning a sentence score&lt;/h1&gt;
&lt;p&gt;Now that we got our &lt;code class=&quot;highlighter-rouge&quot;&gt;freqTable&lt;/code&gt;. We can now use it to figure out which sentences is the most relevant 
in terms of the overall message of our text. &lt;em&gt;“But why are sentences with more frequently accuring 
words more relevant”&lt;/em&gt; - you might ask yourself. Good question.
&lt;br /&gt;
Let’s say we got a text conerning obesity, now the most frequently accuring words in this piece of 
text might be the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;obesity&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fast-food&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;commercials&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt;.
Now, whenever a sentence is containing one of these words, it will automatically be weighted as more 
relevant, because it explicitly mentions one of the main subjects of the text. Comparatively, if there 
were to be a sentence containing a lot of the less frequent words. That sentence is most 
likely not as relevant regarding the overall message; thus a sentence we would like to avoid having 
in our summary.&lt;/p&gt;

&lt;p&gt;Let’s start by creating a list of sentence tokens and a dictionary which we will be using for storing 
the sentence value of each sentence.&lt;/p&gt;

&lt;p&gt;In order to be able to iterate over the freqTable starting from 
the highest frequent words&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sent_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sentenceValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We go through every sentence and check if the text contains any of the words from our &lt;code class=&quot;highlighter-rouge&quot;&gt;freqTable&lt;/code&gt;, 
if it’s true we increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;sentenceValue&lt;/code&gt; with the respective &lt;code class=&quot;highlighter-rouge&quot;&gt;wordFreq&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordFreq&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freqTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentenceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sentenceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordFreq&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sentenceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordFreq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Great! We now have a dictionary containing a value of each sentence, all we need to do now is to 
compare each sentence’s value with a threshold; in order to filter away the less relevant 
sentences.&lt;/p&gt;

&lt;h1 id=&quot;step-4---build-the-summary&quot;&gt;Step 4 - Build the summary&lt;/h1&gt;

&lt;p&gt;Before we can build our summary. We first have to find/calculate a threshold. The threshold’s job is 
to help us decide which sentences, we should add to our summary. The threshold should neither be too 
big nor small, so that we can get a summary that is just the right size.&lt;/p&gt;

&lt;p&gt;As longer sentences have a higher chance of containing more valuable words, they thus&lt;br /&gt;
an advantage over sentences with less words. Luckily, we can easily solve this by calculating the average 
word value of each sentence. Now, we just have to think of a good threshold, that it is 
capable of filtering just the right ammount of text away.
Our best bet for the most suitable threshold is:
the &lt;code class=&quot;highlighter-rouge&quot;&gt;average&lt;/code&gt; of the sentences’ &lt;code class=&quot;highlighter-rouge&quot;&gt;average word value&lt;/code&gt;. 
&lt;br /&gt;
Let’s start by calculating the &lt;code class=&quot;highlighter-rouge&quot;&gt;average word value&lt;/code&gt; of each sentence and store it in a list:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# List containing the average word value of each sentence&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;avg_wordValue_of_each_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_of_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;[a-zA-Z_']+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;avg_wordValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentenceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The average word value of all sentences&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;avg_wordValue_of_all_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avg_wordValue_of_each_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avg_wordValue_of_each_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Excellent, now all we need to do is to compare each sentence to the average word value of all 
sentences. You may alter the threshold weight to your liking: &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;higher weight -&amp;gt; less text&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lower weight -&amp;gt; more text&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Threshold weight - I prefer 0.8 &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Add sentence to summary if the avg word value of sentence&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# is bigger than the avg word value of all sentences.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg_wordValue_of_each_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg_wordValue_of_all_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Display the summary&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it! We now have a fully functional text summarizer. 
You can get the full code &lt;a href=&quot;https://gist.github.com/Sebastian-Nielsen/1cbb695423768d96e024333f1144d0e4&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;lets-test-it&quot;&gt;Let’s test it&lt;/h1&gt;

&lt;div&gt;&lt;a style=&quot;text-align: center; width: 100%;&quot; onclick=&quot;toggle_visibility('toggle_1');&quot; class=&quot;btn btn-info&quot;&gt;Show sample text&lt;/a&gt;&lt;/div&gt;
&lt;div id=&quot;toggle_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;article class=&quot;highlight&quot;&gt;
    &lt;p&gt;
The financial crisis of 2008-09 demolished the credibility of big business in the West. Afterwards executives kept out of the public eye. Instead of holding their annual meetings in grand buildings in Manhattan, Wall Street banks shifted them to smaller cities where fewer people would turn up—Jersey City for Goldman Sachs and New Orleans for JPMorgan Chase. Bosses kept schtum during congressional and parliamentary roastings. Those who spoke their mind paid a price. In 2011 Bob Diamond, the boss of Barclays, told Britons that the time for remorse was over. By 2012 he was fired. When Mitt Romney ran for president that year his business career was a liability.
&lt;br /&gt;
The years of penitence ended in early 2017. After being shunned by the Obama administration, most executives were flattered when they were asked to break bread at the Trump White House, and to share ideas about how to reform the tax code and cut red tape. Elon Musk of Tesla, Jeff Immelt of General Electric and others joined advisory councils aimed at boosting the economy. Accusations of cronyism circulated from the start, however, and by August any proximity to Mr Trump became toxic. Most executives were relieved when the circus came to an end. 
	&lt;/p&gt;
	&lt;/article&gt;
&lt;/div&gt;

&lt;div&gt;&lt;a style=&quot;text-align: center; width: 100%;&quot; onclick=&quot;toggle_visibility('toggle_2');&quot; class=&quot;btn btn-info&quot;&gt;Show result&lt;/a&gt;&lt;/div&gt;
&lt;div id=&quot;toggle_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;article class=&quot;highlight&quot;&gt;
	&lt;h5&gt;Weight = 1&lt;/h5&gt;
    &lt;p&gt;
	 Afterwards executives kept out of the public eye. Bosses kept schtum during congressional and parliamentary roastings. Those who spoke their mind paid a price. By 2012 he was fired. The years of penitence ended in early 2017.
	&lt;/p&gt;
	&lt;h5&gt;Weight = 0.8&lt;/h5&gt;
	&lt;p&gt;
	The financial crisis of 2008-09 demolished the credibility of big business in the West. Afterwards executives kept out of the public eye. Bosses kept schtum during congressional and parliamentary roastings. Those who spoke their mind paid a price. In 2011 Bob Diamond, the boss of Barclays, told Britons that the time for remorse was over. By 2012 he was fired. The years of penitence ended in early 2017. Accusations of cronyism circulated from the start, however, and by August any proximity to Mr Trump became toxic. Most executives were relieved when the circus came to an end.
	&lt;/p&gt;
	&lt;/article&gt;
&lt;/div&gt;

&lt;div&gt;&lt;a style=&quot;text-align: center; width: 100%;&quot; onclick=&quot;toggle_visibility('toggle_3');&quot; class=&quot;btn btn-info&quot;&gt;Show average word value of each sentence&lt;/a&gt;&lt;/div&gt;
&lt;div id=&quot;toggle_3&quot; style=&quot;display: none;&quot;&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;th&gt;&lt;strong&gt;avg word value of sentence&lt;/strong&gt;&lt;/th&gt;
		&lt;th&gt;&lt;strong&gt;sentence text&lt;/strong&gt;&lt;/th&gt;	
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;4.0&lt;/td&gt;
		&lt;td&gt;By 2012 he was fired.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;2.75&lt;/td&gt;
		&lt;td&gt;Afterwards executives kept out of the public eye.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;2.71&lt;/td&gt;
		&lt;td&gt;The years of penitence ended in early 2017.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;2.5&lt;/td&gt;
		&lt;td&gt;Bosses kept schtum during congressional and parliamentary roastings.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;2.12&lt;/td&gt;
		&lt;td&gt;Those who spoke their mind paid a price.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;2.0&lt;/td&gt;
		&lt;td&gt;Most executives were relieved when the circus came to an end.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;1.94&lt;/td&gt;
		&lt;td&gt;In 2011 Bob Diamond, the boss of Barclays, told Britons that the time for remorse was over.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;1.89&lt;/td&gt;
		&lt;td&gt;Accusations of cronyism circulated from the start, however, and by August any proximity to Mr Trump became toxic.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;1.69&lt;/td&gt;
		&lt;td&gt;
The financial crisis of 2008-09 demolished the credibility of big business in the West.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;1.68&lt;/td&gt;
		&lt;td&gt;Elon Musk of Tesla, Jeff Immelt of General Electric and others joined advisory councils aimed at boosting the economy.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;1.64&lt;/td&gt;
		&lt;td&gt;When Mitt Romney ran for president that year his business career was a liability.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;1.31&lt;/td&gt;
		&lt;td&gt;Instead of holding their annual meetings in grand buildings in Manhattan, Wall Street banks shifted them to smaller cities where fewer people would turn up—Jersey City for Goldman Sachs and New Orleans for JPMorgan Chase.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;1.13&lt;/td&gt;
		&lt;td&gt;After being shunned by the Obama administration, most executives were flattered when they were asked to break bread at the Trump White House, and to share ideas about how to reform the tax code and cut red tape.&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;style&gt;
	td, th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}
&lt;/style&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
    function toggle_visibility(id) {
       var e = $(&quot;#&quot; + id);
	   e.slideToggle();
	};
    
//--&gt;
&lt;/script&gt;

&lt;style&gt;
code.language-python span.c {
	color: rgb(0,200,0);
}
&lt;/style&gt;

&lt;style&gt;

article.highlight {
  margin-bottom: 10px;
  width: auto;
  padding: 0 25px;
  font-size: 0.9em;
  
  color: #eeeeee;
  background: #000000;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 5px;
  box-shadow: 0px 0px 10px #000000;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
  
  /* 
    all elements in this element will change 
    color through a 0.1 second lasting linear
    transition.
  */
  * {
    transition: color 0.1s linear;
  }
  
  // make sure span keeps this color

  
  p {
    margin: 0;
  }
  
  /*
    change the text-color on hover, the color 
    in span will not change due to !important.
  
    additionally, the .hover class on the 
    article.highlight element will achieve
    the same result.
  */

}
article.highlight.interactive span {
    color: #eeeeee !important;
  }
article.highlight.interactive:hover, article.highlight.interactive.hover {
    color: rgba(238,238,238, 0.2);
  }
&lt;/style&gt;

&lt;script&gt;
$(function() {
  setTimeout(function() {
    $(&quot;article.highlight&quot;).toggleClass(&quot;hover&quot;);
    setTimeout(function() {
      $(&quot;article.highlight&quot;).toggleClass(&quot;hover&quot;);
    }, 2000);
  }, 1000);
});
&lt;/script&gt;


    &lt;p&gt;&lt;a href=&quot;https://sebastian3495.github.io/natural%20language%20processing%20(nlp)/data%20analytics/Text-summarizer/&quot;&gt;Text summarizer&lt;/a&gt; was originally published by Sebastian Nielsen at &lt;a href=&quot;https://sebastian3495.github.io&quot;&gt;Sebastian Nielsen's Blog&lt;/a&gt; on March 19, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Sentiment analysis of Danish texts (wordlist)]]></title>
 <link rel="alternate" type="text/html" href="https://sebastian3495.github.io/data%20science/Sentiment-Analysis/" />
  <id>https://sebastian3495.github.io/data%20science/Sentiment-Analysis</id>
  <published>2018-03-16T00:00:00+02:00</published>
  <updated>2018-03-16T00:00:00+02:00</updated>
  <author>
    <name>Sebastian Nielsen</name>
    <uri>https://sebastian3495.github.io</uri>
    <email>sebastiangrundet@hotmail.dk</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;the-process-of-determining-the-emotional-tone-behind-a-series-of-words-weary-smiley&quot;&gt;The process of determining the emotional tone behind a series of words :weary: :smiley:&lt;/h3&gt;

&lt;p&gt;Sentiment analysis — also known as opinion mining — is as simple as assigning each word in a text a value based on the bias 
of the word, after which the overall sentiment is decided by summarizing the values.
&lt;br /&gt;
This is especially useful for larger companies, who wish to gain an insight in their customers opionions. However, students 
who have been giving the job to e.g. analyse a phrase, or locate all positiviely and negatively charged words, might 
find it just as useful.&lt;/p&gt;

&lt;!-- more --&gt;
&lt;!--more--&gt;

&lt;h3 id=&quot;what-is-a-wordlist-based-approach&quot;&gt;What is a wordlist-based approach?&lt;/h3&gt;
&lt;p&gt;A wordlist-based approach bassically means, that we decide the polarity score of each word by looking up the word in a predefined dictionary
with scores already associated to each word. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The good thing about it is that you can program it fairly easy with little to no code. However, it’s not all rainbows and sunshine, it got its drawbacks.
Since the words are given a value based on the sentiment of the word individually, the context in wich the word appears is therefore not taken 
into consideration, which makes it bad at detecting things such as sarcasm or passive aggressiveness. For that reason, wordlist-based approaches is 
best suited for formal language as opposed to spoken language. 
&lt;br /&gt; 
&lt;br /&gt;
For more complex sentences a better choice would involve &lt;a href=&quot;https://www.nltk.org/&quot;&gt;training a model&lt;/a&gt;, 
which calculates the polarity by forming a relationship between the words. However that said, it is 
still an execellent tool and extremely useful in certain scenarios.&lt;/p&gt;

&lt;h1 id=&quot;lets-get-started&quot;&gt;Let’s get started&lt;/h1&gt;

&lt;p&gt;We will be using the &lt;code class=&quot;highlighter-rouge&quot;&gt;afinn&lt;/code&gt; package to analyse a Danish text, as it supports the Danish language; although when it comes to English, &lt;code class=&quot;highlighter-rouge&quot;&gt;textblob&lt;/code&gt; is
the preffered choice.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Anyways! We start off by instantiating an instance of the Afinn object, followed by a namedtuple that is going to require 3 values,
the polarity score of the word; the word itself; and the line number at which the word is located.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;afinn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Afinn&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# https://github.com/fnielsen/afinn   &lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;afinn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Afinn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'da'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emoticons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ScoreTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ScoreTuple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'score word line'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Getting the sentiment score of a text is straight forward. It is worth taking into account, that it’s a good practice
to clean the text from “special characters” before analysing it, as it might cause some troubles to for instance
 analyse a word such as: “extraordinary..?”. &lt;br /&gt;
 Note that it assumes &lt;code class=&quot;highlighter-rouge&quot;&gt;..?&lt;/code&gt; is a part of the word.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'''Cleans the text from characters such as , . ! ? '''&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;chars_to_clean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_to_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sentiment_score_of_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Clean the text&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;afinn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Get the score of the text&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The text's score is: {score}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s test the functions on the following text:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;          &lt;span class=&quot;c&quot;&gt;# A text with an overall positive attitude&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Dette er en dansk tekst, fyldt med positive og gode ord. Der er dog nogle dårlige og knap så
             gode ord ind i mellem. Men overordnet set er teksten positivt ladet med fantastiske himmerigske ord.&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentiment_score_of_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;The text's score is: 5.0&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A higher score is equal to a higher confidence in that the text is positive, meanwhile a lower score is equal to a higher confidence
in that the text is conveying a negative sentiment. &lt;br /&gt;
Now, let’s take a closer look at each word individually using the following function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sentiment_score_of_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore_neutral_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_analysis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;lineNr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignore_neutral_words&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;afinn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScoreTuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;afinn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineNr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;lineNr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_analysis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nTuple&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{nTuple.score} &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{nTuple.word}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, linje: {nTuple.line}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;
	
    &lt;span class=&quot;c&quot;&gt;# We set the ignore_neutral_words argument to True, &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# as we do not want to print out the neutral words&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentiment_score_of_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore_neutral_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
4.0 &quot;fantastiske&quot;, linje: 2
2.0 &quot;positivt&quot;, linje: 2
2.0 &quot;positive&quot;, linje: 1
-3.0 &quot;dårlige&quot;, linje: 1
&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not surprisingly, we only have a few words affecting our total text polarity score. &lt;br /&gt;
But there you have it, a simple sentiment analysis using a wordlist-based approach wich took no more than 50 lines of code.
A simple yet rather effective way of creating a quick simple sentiment analysis.&lt;/p&gt;

&lt;p&gt;Get the full code &lt;a href=&quot;https://gist.github.com/Sebastian-Nielsen/1cbb695423768d96e024333f1144d0e4&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;other-use-cases-of-sentiment-analyses&quot;&gt;Other use cases of sentiment analyses:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://finnaarupnielsen.wordpress.com/2013/01/09/more-on-automated-sentiment-analysis-of-danis/&quot;&gt;Sentiment analysis of Danish politicians on Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.to/rodolfoferro/sentiment-analysis-on-trumpss-tweets-using-python-&quot;&gt;Sentiment analysis on Trump’s tweets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.to/lornamariak/exploring-sentiment-analysis-o6j&quot;&gt;Exploring sentiment analysis as an application of text mining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;https://sebastian3495.github.io/data%20science/Sentiment-Analysis/&quot;&gt;Sentiment analysis of Danish texts (wordlist)&lt;/a&gt; was originally published by Sebastian Nielsen at &lt;a href=&quot;https://sebastian3495.github.io&quot;&gt;Sebastian Nielsen's Blog&lt;/a&gt; on March 16, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Twitter contest joiner bot]]></title>
 <link rel="alternate" type="text/html" href="https://sebastian3495.github.io/bots/Twitter-contest-joiner-bot/" />
  <id>https://sebastian3495.github.io/bots/Twitter-contest-joiner-bot</id>
  <updated>2018-03-09T00:00:00-00:00</updated>
  <published>2018-03-09T00:00:00+02:00</published>
  
  <author>
    <name>Sebastian Nielsen</name>
    <uri>https://sebastian3495.github.io</uri>
    <email>sebastiangrundet@hotmail.dk</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;automate-the-process-of-joining-giveaway-contests-on-twitter-star2star2star2&quot;&gt;Automate the process of joining giveaway contests on Twitter :star2::star2::star2:&lt;/h3&gt;

&lt;figure class=&quot;image-right&quot;&gt;
	&lt;a href=&quot;https://sebastian3495.github.io/images/P_twitter-bot/cool_stuff.jpg&quot;&gt;&lt;img src=&quot;https://sebastian3495.github.io/images/P_twitter-bot/cool_stuff.jpg&quot; width=&quot;250px;&quot; /&gt;&lt;/a&gt;
	&lt;figcaption style=&quot;text-align: center;&quot;&gt;Some cool stuff you can win if your lucky&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The inspiration for this post is drawn from this &lt;a target=&quot;_blank&quot; href=&quot;https://www.hscott.net/twitter-contest-winning-as-a-service/&quot;&gt;article&lt;/a&gt;. 
&lt;br /&gt; A truly fun project I just had to try myself, so here it is; my own little version of the Twitter bot.&lt;/p&gt;

&lt;p&gt;In order to use this bot, you will first have to sign up for the &lt;a target=&quot;_blank&quot; href=&quot;https://apps.twitter.com/&quot;&gt;Twitter API&lt;/a&gt;.
This should only take about 5 minutes. Get your keys, secrets, and token and fill out the required fields in the script.&lt;/p&gt;

&lt;!-- more --&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;python-3x------github-gist&quot;&gt;Python 3.x              &lt;a target=&quot;_blank&quot; href=&quot;https://gist.github.com/Sebastian-Nielsen/f57244bad3882b0232c04ef4c775cb29&quot;&gt;GitHub gist&lt;/a&gt;&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorama&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;colorama&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;consumer_key&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# WRITE_HERE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;consumer_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# WRITE_HERE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;access_token&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# WRITE_HERE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;access_secret&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# WRITE_HERE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;your_username&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Write your Twitter username here&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OAuthHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumer_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'#rt '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashtags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Searching for:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAGENTA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
		 &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Found tweet by: @'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GREEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your_username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Found tweet posted by bot, skipping..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweeted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BRIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'retweeted'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'liked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Followed user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Already following'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

       &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'----sleeping----'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       
       &lt;span class=&quot;c&quot;&gt;# 10% chance to update the status &lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;# (I suppose it make the bot seem more human)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Updater status med teksten:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		
   &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TweepError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadTimeoutError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can experiment with the amount of time the bot should wait between each retweet/like/follow. 
But I wouldn’t advice you to decrease the sleep timer too much, since a too low sleep timer 
dramatically would increase the likely-hood of Twitter recognizing you as a spam bot;
Which obviously is something you would not want to happen.&lt;/p&gt;

&lt;p&gt;That said, you are free to do whatever you want with the code. Good luck!  :four_leaf_clover::four_leaf_clover:&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://sebastian3495.github.io/bots/Twitter-contest-joiner-bot/&quot;&gt;Twitter contest joiner bot&lt;/a&gt; was originally published by Sebastian Nielsen at &lt;a href=&quot;https://sebastian3495.github.io&quot;&gt;Sebastian Nielsen's Blog&lt;/a&gt; on March 09, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[VøBot]]></title>
 <link rel="alternate" type="text/html" href="https://sebastian3495.github.io/bots/V%C3%B8Bot/" />
  <id>https://sebastian3495.github.io/bots/VøBot</id>
  <updated>2018-03-05T00:00:00-00:00</updated>
  <published>2018-03-05T00:00:00+02:00</published>
  
  <author>
    <name>Sebastian Nielsen</name>
    <uri>https://sebastian3495.github.io</uri>
    <email>sebastiangrundet@hotmail.dk</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;færdiggør-rentabilitetsanalyser-på-40-sek--hourglass_flowing_sandhourglass-ok_hand&quot;&gt;Færdiggør rentabilitetsanalyser på 40 sek. ! :hourglass_flowing_sand::hourglass: :ok_hand:&lt;/h2&gt;
&lt;p&gt;Dette software er udviklet til hhx studerende med fokus på at gøre det nemmere at arbejde med rentabiletsanalyser. Alt du skal gøre er at copy paste 
dine nøgletal ind i programmet, hvorefter VøBot skriver en rentabilitetsanalyse til et 12-tal! Som om det ikke er nok tillbyder VøBot en række ekstra features, som 
du kan læse mere om på VøBot’s hjemmeside: &lt;br /&gt;&lt;a id=&quot;VøBot&quot; target=&quot;_blank&quot; href=&quot;http://www.voebot.tk/&quot;&gt;:fire:www.voebot.tk:fire:&lt;/a&gt;&lt;/p&gt;

&lt;style&gt;
	#VøBot:hover {
		color: red;
	}
&lt;/style&gt;

&lt;p class=&quot;image-right&quot;&gt;&lt;img src=&quot;https://sebastian3495.github.io/images/P_voebot/logoRound.PNG&quot; width=&quot;150px;&quot; style=&quot;margin-right: 100px;&quot; /&gt;
&lt;img src=&quot;https://sebastian3495.github.io/images/P_voebot/gui.PNG&quot; width=&quot;350px;&quot; /&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://sebastian3495.github.io/bots/V%C3%B8Bot/&quot;&gt;VøBot&lt;/a&gt; was originally published by Sebastian Nielsen at &lt;a href=&quot;https://sebastian3495.github.io&quot;&gt;Sebastian Nielsen's Blog&lt;/a&gt; on March 05, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Disable spotify ads]]></title>
 <link rel="alternate" type="text/html" href="https://sebastian3495.github.io/intro/Spotify-ads/" />
  <id>https://sebastian3495.github.io/intro/Spotify-ads</id>
  <updated>2016-12-02T00:00:00-00:00</updated>
  <published>2018-03-05T00:00:00+02:00</published>
  
  <author>
    <name>Sebastian Nielsen</name>
    <uri>https://sebastian3495.github.io</uri>
    <email>sebastiangrundet@hotmail.dk</email>
  </author>
  <content type="html">
    &lt;p&gt;Spotify is coded in such a way, that it will keep playing music if it can’t gaing access to an ad. This script redirects all Spotify’s requests 
to the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; at which there is no ad resources located; thus Spotify will never be able to reach and play an ad.
&lt;br /&gt;That’s all there is it to. Follow the instructions and enjoy the music! :musical_note::musical_note::musical_note:&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://gist.github.com/Sebastian-Nielsen/5480aa6c0775e7a4604ee34bdd17416c&quot; class=&quot;btn btn-success&quot;&gt;Get the code&lt;/a&gt;&lt;/div&gt;

&lt;p class=&quot;image-right&quot;&gt;&lt;img src=&quot;https://sebastian3495.github.io/images/P_spotify/file.PNG&quot; alt=&quot;Smithsonian Image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;instructions&quot;&gt;Instructions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Copy the code from the gist and paste it into a bat file. &lt;br /&gt;
&lt;em&gt;(A bat file is a file with the file extension .bat)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Run it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;code snippet&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@echo 
title Spotify-noad
:: BatchGotAdmin
:-------------------------------------
REM  --&amp;gt; Check for permissions
   IF &quot;%PROCESSOR_ARCHITECTURE%&quot; EQU &quot;amd64&quot; (
&amp;gt;nul 2&amp;gt;&amp;amp;1 &quot;%SYSTEMROOT%\SysWOW64\cacls.exe&quot; &quot;%SYSTEMROOT%\SysWOW64\config\system&quot;
) ELSE (
&amp;gt;nul 2&amp;gt;&amp;amp;1 &quot;%SYSTEMROOT%\system32\cacls.exe&quot; &quot;%SYSTEMROOT%\system32\config\system&quot;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;https://sebastian3495.github.io/intro/Spotify-ads/&quot;&gt;Disable spotify ads&lt;/a&gt; was originally published by Sebastian Nielsen at &lt;a href=&quot;https://sebastian3495.github.io&quot;&gt;Sebastian Nielsen's Blog&lt;/a&gt; on March 05, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[KingdomLikes Bot]]></title>
 <link rel="alternate" type="text/html" href="https://sebastian3495.github.io/bots/Kingdomlikes-bot/" />
  <id>https://sebastian3495.github.io/bots/Kingdomlikes-bot</id>
  <updated>2018-03-05T00:00:00-00:00</updated>
  <published>2018-03-05T00:00:00+02:00</published>
  
  <author>
    <name>Sebastian Nielsen</name>
    <uri>https://sebastian3495.github.io</uri>
    <email>sebastiangrundet@hotmail.dk</email>
  </author>
  <content type="html">
    &lt;p&gt;Designed to automate the process of earning points on kingdomlikes. You can use the points to get like/followers/shares on a social media of your choice.&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://github.com/Sebastian-Nielsen/kingdomlikes-bot&quot; class=&quot;btn btn-success&quot;&gt;Get the code&lt;/a&gt;&lt;/div&gt;

&lt;h1 id=&quot;instructions-book&quot;&gt;Instructions :book:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Install Python 3.x :snake:&lt;/li&gt;
  &lt;li&gt;Edit config.json&lt;/li&gt;
  &lt;li&gt;Comment out the main function and uncomment the collect cookies function. 
Proceed to log onto your social medias account in the order the script tells you to.&lt;/li&gt;
  &lt;li&gt;Comment out the collect cookies function and uncomment the main function and run it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;feeling-generous--heart&quot;&gt;Feeling generous ? :heart:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=DFPZMAKFDBBPA&amp;amp;lc=US&amp;amp;item_name=Sebastian%20A%20B%20Nielsen&amp;amp;no_note=0&amp;amp;cn=Tilf%c3%b8j%20en%20besked%20til%20s%c3%a6lgeren%3a&amp;amp;no_shipping=2&amp;amp;currency_code=DKK&amp;amp;bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted&quot;&gt;&lt;img src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&quot; alt=&quot;paypal&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://sebastian3495.github.io/bots/Kingdomlikes-bot/&quot;&gt;KingdomLikes Bot&lt;/a&gt; was originally published by Sebastian Nielsen at &lt;a href=&quot;https://sebastian3495.github.io&quot;&gt;Sebastian Nielsen's Blog&lt;/a&gt; on March 05, 2018.&lt;/p&gt;
  </content>
</entry>

</feed>
